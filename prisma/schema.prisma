// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String                  @id @default(auto()) @map("_id") @db.ObjectId
  email          String                  @unique()
  name           String
  password       String
  role           String[]

  // Define a one-to-one relationship with UserPreferences
  preferences    UserPreferences?        @relation(fields: [preferencesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  preferencesId  String?                 @unique @db.ObjectId

  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
}

model UserPreferences {
  id             String                  @id @default(auto()) @map("_id") @db.ObjectId
  preferredTheme String

  // Define a one-to-one relationship with User
  user           User?                   
  userId         String?

  @@unique([userId])

  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
}


// model Users {
//   id                  Int                       @default(autoincrement())   @id
//   name                String
//   email               String                    @unique
//   password            String              
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt
//   // locations           Locations[]         
// }

// model Locations {
//   id                  Int                       @default(autoincrement())   @id
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt

//   lat                 Float       
//   lon                 Float
//   name                String
//   country             String?
//   state               String?

//   users               Users[]
//   weather             Weathers?                 @relation(fields: [weatherId], references: [id]) //, onDelete: Cascade
//   weatherId           Int?                      @unique

//   @@unique(fields: [lat, lon], name: "ll")
// }

// model Weathers {
//   id                  Int                       @default(autoincrement())   @id
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt

//   current             CurrentWeather?           @relation(fields: [currentId], references: [id])
//   currentId           Int?                      @unique
//   days                DailyWeather[]

//   locations           Locations?
// }

// model CurrentWeather {
//   id                  Int                       @default(autoincrement())   @id
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt

//   dt                  Int                 
//   current             Json                

//   weather             Weathers?           //@relation(fields: [weatherId], references: [id], onDelete: Cascade)
// }

// model DailyWeather {
//   id                  Int                       @default(autoincrement())   @id
//   createdAt           DateTime                  @default(now())
//   updatedAt           DateTime                  @updatedAt

//   dt                  Int                 
//   daily               Json                

//   weather             Weathers?                 @relation(fields: [weatherId], references: [id], onDelete: Cascade)
//   weatherId           Int?
// }