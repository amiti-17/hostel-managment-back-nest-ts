// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique()
  name     String
  password String
  roles    String[]
  phone    String   @unique()

  // Define a one-to-one relationship with UserPreferences
  preferences   UserPreferences? @relation(fields: [preferencesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  preferencesId String?          @unique @db.ObjectId

  // Define a one-to-one relationship with Image for profile image
  profileImage   ProfileImage? @relation(fields: [profileImageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileImageId String?       @unique @db.ObjectId

  groupList    Group[]  @relation(fields: [groupIdsList], references: [id])
  groupIdsList String[] @db.ObjectId

  readDashboardPostIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  type     String
  imageSrc String

  user User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  preferredTheme String

  // Define a one-to-one relationship with User
  user   User?
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model DashboardPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  description String

  logoImage   DashboardPostImage? @relation(fields: [logoImageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logoImageId String?             @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DashboardPostImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  type     String
  imageSrc String

  dashboardPost DashboardPost?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identification String
  type           String
  isGroup        Boolean
  isPrivate      Boolean

  usersList    User[]   @relation(fields: [usersIdsList], references: [id])
  usersIdsList String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title            String
  shortDescription String?
  description      String?

  type         String
  roleNeeds    String[]
  status       String
  dateStart    DateTime?
  dateFinish   DateTime?
  isReassigned Boolean   @default(false)
  reassignedTo String[]
  estimated    Int?
  importance   String
  executorsId  String?
  isAssigned   Boolean   @default(false)

  review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String? @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fromId      String
  toId        String
  title       String
  description String
  mark        Int
  notes       String?

  task Task?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hotel {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  location     String?
  whenBuild    DateTime @default(now())
  whenLaunched DateTime @default(now())

  floors Floor[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Floor {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  number Int
  rooms  Room[]

  hotel   Hotel?  @relation(fields: [hotelId], references: [id])
  hotelId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  number            Int
  type              String
  capacity          Int
  status            String
  title             String
  description       String?
  statusDescription String?
  isFree            Boolean @default(true)
  isOccupied        Boolean @default(false)
  // Add other room attributes as needed

  floor   Floor?  @relation(fields: [floorId], references: [id])
  floorId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
